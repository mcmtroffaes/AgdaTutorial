1 patch for repository http://code.haskell.org/Agda:

Wed Jan 23 14:41:58 CET 2013  divipp@gmail.com
  * first version of pandoc backend for generating HTML for literate Agda files


New patches:

[first version of pandoc backend for generating HTML for literate Agda files
divipp@gmail.com**20130123134158
 Ignore-this: c186a0a1c09679750de2cc7696c2b835
] hunk ./Agda.cabal 41
                     doc/release-notes/*.txt
 data-dir:           src/data
 data-files:         Agda.css
+                    Agda.template
                     emacs-mode/*.el
                     EpicInclude/AgdaPrelude.e
                     EpicInclude/stdagda.c
hunk ./Agda.cabal 87
                     geniplate >= 0.6.0.3 && < 0.7,
                     parallel < 3.3,
                     deepseq == 1.3.*,
+                    pandoc == 1.10.*,
+                    pandoc-types == 1.10.*,
                     text == 0.11.*
 
   if impl(ghc < 7.6)
addfile ./src/data/Agda.template
hunk ./src/data/Agda.template 1
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml"$if(lang)$ lang="$lang$" xml:lang="$lang$"$endif$>
+<head>
+  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
+  <meta http-equiv="Content-Style-Type" content="text/css" />
+  <meta name="generator" content="pandoc" />
+$for(author-meta)$
+  <meta name="author" content="$author-meta$" />
+$endfor$
+$if(date-meta)$
+  <meta name="date" content="$date-meta$" />
+$endif$
+  <title>$if(title-prefix)$$title-prefix$ - $endif$$pagetitle$</title>
+  <style type="text/css">code{white-space: pre;}</style>
+$if(quotes)$
+  <style type="text/css">q { quotes: "“" "”" "‘" "’"; }</style>
+$endif$
+$if(highlighting-css)$
+  <style type="text/css">
+$highlighting-css$
+  </style>
+$endif$
+$for(css)$
+  <link rel="stylesheet" href="$css$" $if(html5)$$else$type="text/css" $endif$/>
+$endfor$
+$if(math)$
+  $math$
+$endif$
+$for(header-includes)$
+  $header-includes$
+$endfor$
+</head>
+<body>
+$for(include-before)$
+$include-before$
+$endfor$
+$if(title)$
+<div id="$idprefix$header">
+<h1 class="title">$title$</h1>
+$for(author)$
+<h2 class="author">$author$</h2>
+$endfor$
+$if(date)$
+<h3 class="date">$date$</h3>
+$endif$
+</div>
+$endif$
+$if(toc)$
+<div id="$idprefix$TOC">
+$toc$
+</div>
+$endif$
+$body$
+$for(include-after)$
+$include-after$
+$endfor$
+</body>
+</html>
hunk ./src/full/Agda/Interaction/Highlighting/HTML.hs 23
 import Data.Maybe
 import qualified Data.Map  as Map
 import qualified Data.List as List
+import qualified Data.Char as Char
+
+import Text.Pandoc.Definition
+import qualified Text.Pandoc.Definition as Pandoc
+import Text.Pandoc.Options
+import Text.Pandoc.Readers.Markdown
+import Text.Pandoc.Writers.HTML
 
 import Paths_Agda
 
hunk ./src/full/Agda/Interaction/Highlighting/HTML.hs 37
 import Agda.Interaction.Highlighting.Generate
 import Agda.Interaction.Highlighting.Precise
 import Agda.Interaction.Highlighting.Range
+import Agda.Interaction.Options (isLiterate)
 import Agda.TypeChecking.Monad (TCM)
 import qualified Agda.TypeChecking.Monad as TCM
 import qualified Agda.Syntax.Abstract as A
hunk ./src/full/Agda/Interaction/Highlighting/HTML.hs 58
 defaultCSSFile :: FilePath
 defaultCSSFile = "Agda.css"
 
+-- | The name of the default template file for pandoc.
+
+defaultTemplateFile :: FilePath
+defaultTemplateFile = "Agda.template"
+
 -- | Generates HTML files from all the sources which the given module
 -- depends on (including the module itself).
 --
hunk ./src/full/Agda/Interaction/Highlighting/HTML.hs 116
       contents <- liftIO $ UTF8.readTextFile $ filePath f
       css      <- maybe defaultCSSFile id . optCSSFile <$>
                     TCM.commandLineOptions
-      let html = page css mod contents highlighting
+      mSlideVariant <- fmap read . optGenerateHTML <$> TCM.commandLineOptions
+      html <- case mSlideVariant of
+          Just slideVariant | isLiterate (filePath f) -> do
+              templateFile <- maybe (liftIO $ getDataFileName defaultTemplateFile) return =<<
+                            (optTemplateFile <$> TCM.commandLineOptions)
+              template <- liftIO $ UTF8.readTextFile templateFile
+              return $ pandocPage template css slideVariant mod contents highlighting
+          _ -> do
+              return $ renderHtml $ page css mod contents highlighting
       TCM.reportSLn "html" 1 $ "Generating HTML for " ++
                                render (pretty mod) ++
                                " (" ++ target ++ ")."
hunk ./src/full/Agda/Interaction/Highlighting/HTML.hs 128
-      liftIO $ UTF8.writeFile target (renderHtml html)
+      liftIO $ UTF8.writeFile target html
   where target = dir </> modToFile mod
 
hunk ./src/full/Agda/Interaction/Highlighting/HTML.hs 131
+
 -- | Constructs the web page, including headers.
 
 page :: FilePath              -- ^ URL to the CSS file.
hunk ./src/full/Agda/Interaction/Highlighting/HTML.hs 157
   +++
   body << pre << code contents info
 
--- | Constructs the HTML displaying the code.
+--- | Constructs the HTML displaying the code.
 
 code :: String         -- ^ The contents of the module.
      -> CompressedFile -- ^ Highlighting information.
hunk ./src/full/Agda/Interaction/Highlighting/HTML.hs 165
 code contents info =
   mconcat $
   map (\(pos, s, mi) -> annotate pos mi (stringToHtml s)) $
+  tokenStream contents info
+
+-- | Constructs the web page, including headers, with pandoc.
+
+pandocPage
+     :: String                -- ^ Template
+     -> FilePath              -- ^ URL to the CSS file.
+     -> HTMLSlideVariant      -- ^ Slide variant
+     -> C.TopLevelModuleName  -- ^ Module to be highlighted.
+     -> String                -- ^ The contents of the module.
+     -> CompressedFile        -- ^ Highlighting information.
+     -> String
+pandocPage template css slideVariant modName contents info =
+  writeHtmlString def  { writerStandalone = True
+                       , writerTemplate = template
+                       , writerTableOfContents = True
+                       , writerSlideVariant = slideVariant
+                       , writerVariables = [("css",css)]
+                       }
+    $ Pandoc meta $ concat $ zipWith ($) (removeCodeBlocks md []) cf
+ where
+  cf = (++ [[]])
+     . map conv
+     . getCode
+     . splitComment "\n\\begin{code}"
+     . splitComment "\n\\end{code}"
+     $ tokenStream contents info
+
+  (Pandoc meta md) = readMarkdown def contents 
+
+  conv x =  [Para [ RawInline "html"
+                  . renderHtmlFragment
+                  . (pre <<) 
+                  . mconcat
+                  . map (\(pos, s, mi) -> annotate pos mi (stringToHtml s))
+                  $ x
+                  ]]
+
+  getCode ((_,s,_):xs)
+    | s == "\n\\begin{code}" || List.isPrefixOf "\\begin{code}" s
+    = getCode' xs []
+  getCode (_:xs) = getCode xs
+  getCode [] = []
+
+  getCode' ((_,s,_):xs)
+    | s == "\n\\end{code}" || List.isPrefixOf "\\end{code}" s
+    = (: getCode xs) . reverse
+  getCode' (x:xs) = getCode' xs . (x:)
+  getCode' [] = error "__IMPOSSIBLE__" -- ???
+
+  splitComment w = concatMap f
+    where
+      f (pos, s, mi) = [(pos, t, mi) | t <- filter (not . null) $ g s []]
+
+      g s | List.isPrefixOf w s = (: (w : g (drop (length w) s) [])) . reverse
+      g [] = (:[]) . reverse
+      g (c:cs) = g cs . (c:)
+
+  removeCodeBlocks (RawBlock "latex" s: xs) | List.isPrefixOf "\\begin{code}" s
+        = removeCodeBlocks' (++) xs
+  removeCodeBlocks (RawBlock "html" s: xs) | List.isPrefixOf "<!--\n\\begin{code}" s
+        = removeCodeBlocks' const xs
+  removeCodeBlocks xs@(Para (Pandoc.Str "\\begin{code}":_):_)
+        = removeCodeBlocks' (++) (drop 1 $ dropWhile (not . end) xs)
+       where
+        end (Para xs@(_:_)) = last xs == Pandoc.Str "\\end{code}"
+        end _ = False
+  removeCodeBlocks (x:xs) = removeCodeBlocks xs . (x:)
+  removeCodeBlocks [] = removeCodeBlocks' (++) []
+
+  removeCodeBlocks' f xs acc = f (reverse acc): case xs of
+    []  -> []
+    xs  -> removeCodeBlocks xs []
+
+-- | Constructs token stream ready to print.
+
+tokenStream
+     :: String         -- ^ The contents of the module.
+     -> CompressedFile -- ^ Highlighting information.
+     -> [(Integer, String, MetaInfo)]  -- ^ (position, contents, info)
+tokenStream contents info =
   map (\cs -> case cs of
           (mi, (pos, _)) : _ ->
             (pos, map (snd . snd) cs, maybe mempty id mi)
hunk ./src/full/Agda/Interaction/Highlighting/HTML.hs 256
   where
   infoMap = toMap (decompress info)
 
-  annotate :: Integer -> MetaInfo -> Html -> Html
-  annotate pos mi = anchor ! attributes
-    where
+annotate :: Integer -> MetaInfo -> Html -> Html
+annotate pos mi = anchor ! attributes
+  where
     attributes =
       [name (show pos)] ++
       maybe [] link (definitionSite mi) ++
hunk ./src/full/Agda/Interaction/Options.hs 31
 import System.Console.GetOpt	(getOpt, usageInfo, ArgOrder(ReturnInOrder)
 				, OptDescr(..), ArgDescr(..)
 				)
+import Text.Pandoc.Options (HTMLSlideVariant(..))
+
 import Agda.Utils.TestHelpers   ( runTests )
 import Agda.Utils.QuickCheck    ( quickCheck' )
 import Agda.Utils.FileName      ( AbsolutePath )
hunk ./src/full/Agda/Interaction/Options.hs 73
               -- ^ In the absence of a path the project root is used.
 	    , optGenerateVimFile      :: Bool
             , optGenerateLaTeX        :: Bool
-	    , optGenerateHTML         :: Bool
+	    , optGenerateHTML         :: Maybe SlideVariant
 	    , optDependencyGraph      :: Maybe FilePath
 	    , optLaTeXDir             :: FilePath
 	    , optHTMLDir              :: FilePath
hunk ./src/full/Agda/Interaction/Options.hs 78
 	    , optCSSFile              :: Maybe FilePath
+	    , optTemplateFile         :: Maybe FilePath
 	    , optIgnoreInterfaces     :: Bool
             , optForcing              :: Bool
             , optGhcFlags             :: [String]
hunk ./src/full/Agda/Interaction/Options.hs 119
 -- correspondence between list elements and options.
 type OptionsPragma = [String]
 
+-- | Options for HTML generation with pandoc
+
+type SlideVariant = String
+
 -- | Map a function over the long options. Also removes the short options.
 --   Will be used to add the plugin name to the plugin options.
 mapFlag :: (String -> String) -> OptDescr a -> OptDescr a
hunk ./src/full/Agda/Interaction/Options.hs 157
             , optCompileDir           = Nothing
 	    , optGenerateVimFile      = False
             , optGenerateLaTeX        = False
-	    , optGenerateHTML         = False
+	    , optGenerateHTML         = Nothing
 	    , optDependencyGraph      = Nothing
 	    , optLaTeXDir             = defaultLaTeXDir
 	    , optHTMLDir              = defaultHTMLDir
hunk ./src/full/Agda/Interaction/Options.hs 162
 	    , optCSSFile              = Nothing
+	    , optTemplateFile         = Nothing
 	    , optIgnoreInterfaces     = False
             , optForcing              = True
             , optGhcFlags             = []
hunk ./src/full/Agda/Interaction/Options.hs 221
       Left "Choose at most one: input file or --interaction.\n"
   | not (atMostOne $ interactive ++ [optCompile, optEpicCompile, optJSCompile]) =
       Left "Choose at most one: compilers/--interactive/--interaction.\n"
-  | not (atMostOne $ interactive ++ [optGenerateHTML]) =
+  | not (atMostOne $ interactive ++ [isJust . optGenerateHTML]) =
       Left "Choose at most one: --html/--interactive/--interaction.\n"
   | not (atMostOne $ interactive ++ [isJust . optDependencyGraph]) =
       Left "Choose at most one: --dependency-graph/--interactive/--interaction.\n"
hunk ./src/full/Agda/Interaction/Options.hs 234
   | (not . null . optEpicFlags $ opts)
       && not (optEpicCompile opts) =
       Left "Cannot set Epic flags without using the Epic backend.\n"
+  | not (maybe True ((==1) . length . (reads :: ReadS HTMLSlideVariant)) $ optGenerateHTML opts) =
+      Left $ "Available slide variants: "
+           ++ intercalate " " (map show [NoSlides, S5Slides, SlidySlides, SlideousSlides, DZSlides])
   | otherwise = Right opts
   where
   atMostOne bs = length (filter ($ opts) bs) <= 1
hunk ./src/full/Agda/Interaction/Options.hs 316
 ghcFlag        f o = return $ o { optGhcFlags   = f : optGhcFlags o }
 epicFlagsFlag  s o = return $ o { optEpicFlags  = optEpicFlags o ++ [s]}
 
-htmlFlag      o = return $ o { optGenerateHTML = True }
+htmlFlag    s o = return $ o { optGenerateHTML = s }
 dependencyGraphFlag f o = return $ o { optDependencyGraph  = Just f }
 htmlDirFlag d o = return $ o { optHTMLDir      = d }
 cssFlag     f o = return $ o { optCSSFile      = Just f }
hunk ./src/full/Agda/Interaction/Options.hs 320
+templateFlag f o = return $ o { optTemplateFile = Just f }
 
 includeFlag d o = return $ o { optIncludeDirs = Left (d : ds) }
   where ds = either id (const []) $ optIncludeDirs o
hunk ./src/full/Agda/Interaction/Options.hs 374
     , Option []	    ["latex-dir"] (ReqArg latexDirFlag "DIR")
                     ("directory in which LaTeX files are placed (default: " ++
                      defaultLaTeXDir ++ ")")
-    , Option []	    ["html"] (NoArg htmlFlag)
-		    "generate HTML files with highlighted source code"
+    , Option []	    ["html"] (OptArg htmlFlag "SLIDEVARIANT")
+                    ("generate HTML files with highlighted source code; " ++
+                     "giving slide variant invokes pandoc")
     , Option []	    ["dependency-graph"] (ReqArg dependencyGraphFlag "FILE")
 		    "generate a Dot file with a module dependency graph"
     , Option []	    ["html-dir"] (ReqArg htmlDirFlag "DIR")
hunk ./src/full/Agda/Interaction/Options.hs 384
                      defaultHTMLDir ++ ")")
     , Option []	    ["css"] (ReqArg cssFlag "URL")
 		    "the CSS file used by the HTML files (can be relative)"
+    , Option []	    ["template"] (ReqArg templateFlag "URL")
+		    "the template file used for HTML generation with pandoc (can be relative)"
     , Option []	    ["ignore-interfaces"] (NoArg ignoreInterfacesFlag)
 		    "ignore interface files (re-type check everything)"
     , Option ['i']  ["include-path"] (ReqArg includeFlag "DIR")
hunk ./src/full/Agda/Main.hs 133
             Just _  -> return Nothing
             Nothing -> return $ Just i
 
-          whenM (optGenerateHTML <$> commandLineOptions) $
+          whenM (isJust . optGenerateHTML <$> commandLineOptions) $
             generateHTML $ iModuleName i
 
           whenM (isJust . optDependencyGraph <$> commandLineOptions) $

Context:

[Fixed issue 784.
Andreas Abel <andreas.abel@ifi.lmu.de>**20130120204611
 Ignore-this: e77705e68affd1f06aad288e425d175a
] 
[Patch for hashable-1.2.x simplified.
Dirk Ullrich <dirk.ullrich@gmail.com>**20121222221956
 Ignore-this: e3822d98932ad1bbb05cb26ef39b1e73
 Instances for hashable-1.x can be defined by using `hashWithSalt', too.
] 
[Fix issue 773: make instance arguments examples work again.
Dominique Devriese <dominique.devriese@cs.kuleuven.be>**20121225222236
 Ignore-this: 2d82a154811ef47e7942abd2c404ef96
] 
[Patch for allowing hashable-1.2.x
Dirk Ullrich <dirk.ullrich@gmail.com>**20121215154704
 Ignore-this: b880357f43c4e7ce46c92c49915dda2
] 
[A new benchmark file.
Nils Anders Danielsson <nils.anders.danielsson@gmail.com>**20121218130118
 Ignore-this: 39039eb30c7c62f685b68d7e9958def2
] 
[eliminate a hack in InteractionTop.hs by putting 'stInteractionOutputCallback' into 'PersistentTCState' 
divipp@gmail.com**20121217124756
 Ignore-this: 9c932442a8b9e9c099b575ce07c47ee1
] 
[LaTeX-backend: add two new colour schemes to agda.sty (b/w and conor).
Stevan Andjelkovic <stevan.andjelkovic@strath.ac.uk>**20121123154729
 Ignore-this: 7b4efff033952c5d4f68ec5d6b91cd65
] 
[Fixed issue 729 by thawing the type of an abstract alias before checking.
Andreas Abel <andreas.abel@ifi.lmu.de>**20121122173800
 Ignore-this: 35b9c996795cdf21d85201067a07c787
] 
[Rolled back second fix attempt for 729 which makes types in types sigs optional.
Andreas Abel <andreas.abel@ifi.lmu.de>**20121122164926
 Ignore-this: cacea57b500dfe89dac67401916e294c
] 
[Started to make types in type signatures optional (another attempt to fix 729).
Andreas Abel <andreas.abel@ifi.lmu.de>**20121122164811
 Ignore-this: 3bea61061f4f2ed01fb8cc97bd89f3e8
] 
[Rolled back fix attempt for 729, having a better idea.
Andreas Abel <andreas.abel@ifi.lmu.de>**20121122162131
 Ignore-this: 4702c12613f4552849c3b2eaa1e342c5
] 
[An attempt to fix issue 729 by introducing FunDef with NoTypeSig.
Andreas Abel <andreas.abel@ifi.lmu.de>**20121122161335
 Ignore-this: 974353834d83b01d12d4dce6cd234054
] 
[An unused unfreeseMeta function.
Andreas Abel <andreas.abel@ifi.lmu.de>**20121122161911
 Ignore-this: a7e520e4d9776724cabb68e88a1f1667
] 
[Use modifyMetaStore in updateMetaVar.
Andreas Abel <andreas.abel@ifi.lmu.de>**20121122161545
 Ignore-this: 1a9b113af12557bd75b9f815ac727cbf
] 
[IMPOSSIBLE instead of error in ConcreteToAbstract.
Andreas Abel <andreas.abel@ifi.lmu.de>**20121122161508
 Ignore-this: 3058021df4fc6db13605e95ab6012117
] 
[Some comments in Concrete.Definitions.
Andreas Abel <andreas.abel@ifi.lmu.de>**20121122161429
 Ignore-this: c9ea5c9031af1a342d85c2dac5decdfa
] 
[Fixed issue 765.
Nils Anders Danielsson <nils.anders.danielsson@gmail.com>**20121122160703
 Ignore-this: 6f49e40ddb739b6288e0cac92878bf2a
] 
[Cosmetic change (?), contributed by John Wiegley (?).
Nils Anders Danielsson <nils.anders.danielsson@gmail.com>**20121120100807
 Ignore-this: aab42a36c68842b4a0ed6f32cece1998
] 
[Fixed showPat.
Andrés Sicard-Ramírez <andres.sicard.ramirez@gmail.com>**20121119013638
 Ignore-this: 2b48207fa3baf7e603b0a52903a47e82
] 
[Revert the commenting-out of some tests.
Andreas Abel <andreas.abel@ifi.lmu.de>**20121119105514
 Ignore-this: e689d96b76cbf00d8d67e043feea9284
] 
[Edit made by the HCAR editor, Janis Voigtländer.
Nils Anders Danielsson <nils.anders.danielsson@gmail.com>**20121119094142
 Ignore-this: 2d2d2a2a71af92e106fa212b167b7c41
] 
[Allowed abstract mutual. (Issue 761)
Andreas Abel <andreas.abel@ifi.lmu.de>**20121118224320
 Ignore-this: 3e9a41150ae1fa0945e2c454a58bc6b0
 Disallowed redundant abstract (like in abstract abstract).
 Changed error message about useless abstract.
] 
[Fixed a typo in UselessPrivate error message.
Andreas Abel <andreas.abel@ifi.lmu.de>**20121118224018
 Ignore-this: ddf37eb16eb1471b5d0c60cfa72481c2
] 
[Abstract record declarations are now treated as abstract data declarations. (Issue 759)
Andreas Abel <andreas.abel@ifi.lmu.de>**20121118215532
 Ignore-this: c9e5008493456d72d2bc6f99ddb554a1
 Now there is a better error message when one tries to construct an abstract record.
] 
[Added AGDA_TEST_FLAGS to Makefile debug output.
Andreas Abel <andreas.abel@ifi.lmu.de>**20121118211018
 Ignore-this: 342c7f039e9563637b618e96233088f6
] 
[Rolled back special verbosity for 0 and 1. (Did not perform better.)
Andreas Abel <andreas.abel@ifi.lmu.de>**20121118210211
 Ignore-this: efa2e6a304ba6139752e78ba877b8af8
] 
[Deactivated debug messages in eta contractions.
Andreas Abel <andreas.abel@ifi.lmu.de>**20121118205039
 Ignore-this: 3551f2e60a4c6a6be230757879043655
 Seems to save 5% on std-lib.
] 
[Single out verbosity levels 0 and 1. (Attempt to optimize reportS).
Andreas Abel <andreas.abel@ifi.lmu.de>**20121118204756
 Ignore-this: 2544751089256efab78b6263410b074a
] 
[Fixed eta-contraction for abstract record values (see issue 759).
Andreas Abel <andreas.abel@ifi.lmu.de>**20121118185013
 Ignore-this: 88dc8767504acd455c69b90020617098
] 
[Moved notInScope to Base.
Andreas Abel <andreas.abel@ifi.lmu.de>**20121118164525
 Ignore-this: b5dd9606a65df1c002bff9dbd6a7fe8c
] 
[A use of unless.
Andreas Abel <andreas.abel@ifi.lmu.de>**20121118160738
 Ignore-this: 90e19045647b84629f158cd969bb1594
] 
[Added sym and trans to test/Common.Equality.
Andreas Abel <andreas.abel@ifi.lmu.de>**20121118160538
 Ignore-this: 6028da6dbf3c1f367c6eb814bdbefe15
] 
[A debug printout for checking declarations.
Andreas Abel <andreas.abel@ifi.lmu.de>**20121118155610
 Ignore-this: fe04b1abacc35b508da1886f6cad1bad
] 
[Fixed issue 755.  Polarity info should not be available for abstract definitions.
Andreas Abel <andreas.abel@ifi.lmu.de>**20121118155500
 Ignore-this: 493d0bb5bb7ee5204c48b5c8d32f3460
] 
[Removed unused IsAbstract field from NiceModuleMacro.
Andreas Abel <andreas.abel@ifi.lmu.de>**20121117234357
 Ignore-this: 5a13106fe51449555ec86ea3d92ed929
] 
[Complain if private is used without effect. (Issue 760.)
Andreas Abel <andreas.abel@ifi.lmu.de>**20121117165850
 Ignore-this: 863d7e2afc9bf2df1487522d74475df0
] 
[Fixed issue 754 (internal error due to ill-formed sparse matrices).
Andreas Abel <andreas.abel@ifi.lmu.de>**20121113185126
 Ignore-this: 859f0996e9420e128c0e83bf1eedbf2b
 Supremum and infinium of two different-shaped matrices now implemented.
] 
[Exclude mtl-2.1.  It is severly bugged.
Andreas Abel <andreas.abel@ifi.lmu.de>**20121113160958
 Ignore-this: 3c48faf3942573b4896f7f3b9291ed1e
 Agda will just <<loop>> if you install it in a system with mtl-2.1.
 Can you spot the bug in mtl-2.1?
 
   state :: (s -> (a, s)) -> m a
   state f = do
     s <- get
     let ~(a, s) = f s
     put s
     return a
 
   modify :: MonadState s m => (s -> s) -> m ()
   modify f = state (\s -> ((), f s))
 
 I wonder how this passed the testsuite of Eward (which testsuite?).
 Another instance of the reason why recursive-by-default let is harmful...
] 
[Release notes stub for Version 2.3.4.
Andreas Abel <andreas.abel@ifi.lmu.de>**20121112020941
 Ignore-this: 701ca09fa212c2d8ef58bef3a4884c9e
] 
[Restored -Werror in Agda.cabal (disabled for release).
Andreas Abel <andreas.abel@ifi.lmu.de>**20121112020236
 Ignore-this: 7db1b446424ebf593ca557ddb29ee91c
] 
[Removed unnecessary GADTs pragma.
Andrés Sicard-Ramírez <andres.sicard.ramirez@gmail.com>**20121110162146
 Ignore-this: df35bc750050539f74e34ff2ac6da28a
] 
[Bumped version number to 2.3.3.
andreas.abel@ifi.lmu.de**20121112013740
 Ignore-this: c9d622fe77a8ad4c2339cf538b2e5776
] 
[TAG 2.3.2
andreas.abel@ifi.lmu.de**20121112002455
 Ignore-this: 47f901c8b3f0c10c935a645e75cef8da
] 
Patch bundle hash:
1758567f29540db91b63368179f11a0416e5d93c
